CREATE OR REPLACE FUNCTION Log_listing()
	RETURNS TRIGGER
	LANGUAGE PLPGSQL
	AS
$$
BEGIN
	INSERT INTO GPU_Listing_Archive VALUES (NEW.Listingid, NEW.GPU_model, NEW.GPU_brand, NEW.Customerid, NEW.Price);
	RETURN NEW;
END;
$$;
CREATE OR REPLACE TRIGGER Update_listing 
AFTER INSERT 
ON GPU_Listing
FOR EACH ROW
EXECUTE PROCEDURE Log_listing();

CREATE OR REPLACE FUNCTION Date_now()
	RETURNS TRIGGER
	LANGUAGE PLPGSQL
	AS
$$
BEGIN
	IF (SELECT COUNT(*) FROM GPU_Listing WHERE Available_end_day < CURRENT_DATE) <> 0 THEN
	DELETE FROM GPU_Listing
	WHERE Available_start_day < CURRENT_DATE;
	END IF;
	IF (SELECT COUNT(*) FROM GPU_Listing WHERE Available_start_day < CURRENT_DATE) <> 0 THEN
	UPDATE GPU_Listing SET Available_start_day = CURRENT_DATE
	WHERE Available_start_day < CURRENT_DATE;
	END IF;
	RETURN NEW;
END;
$$;

CREATE OR REPLACE TRIGGER Update_timing 
AFTER UPDATE OR DELETE
ON User1
FOR EACH STATEMENT
EXECUTE PROCEDURE Date_now();